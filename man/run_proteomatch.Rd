% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_proteomatch.R
\name{run_proteomatch}
\alias{run_proteomatch}
\title{Run the ProteoMatch pipeline with a list of PTMs, summed peak data, and algorithm settings}
\usage{
run_proteomatch(
  Modifications,
  ModType,
  SummedSpectra,
  SettingsFile,
  Path = file.path(.getDownloadsFolder(), "Ms1Match"),
  Proteins = NULL,
  Messages = TRUE
)
}
\arguments{
\item{Modifications}{A vector of ProForma strings (i.e. "M.AA\code{[}Acetyl\verb{]}AA\code{[}3.2\verb{]}.V")
or Molecular Formulas. ProForma strings can be pulled from mzid files (MS-GF+, MSPathFinder)
with pull_modifications_from_mzid, or made with create_proforma for MSPathFinder,
ProSight, and pTop modifications. TopPIC proteoforms are provided as ProForma
strings. Required.}

\item{ModType}{A string indicating whether the Modifications are "ProForma" strings or "Molecular Formula". Required.}

\item{SummedSpectra}{A pspecterlib peak_data object of all summed MS1 spectra. This
can be generated with an mzML file and the sum_ms1_spectra function, pulled from
a summed mzML with pspecterlib::get_peak_data, or simply created with
pspecterlib::make_peak_data. Required.}

\item{SettingsFile}{Path to a xlsx file with all user-set parameters. For examples,
try xlsx::read.xlsx(system.file("extdata", "Intact_Protein_Defaults.xlsx", package = "ProteoMatch"), 1).
Required.}

\item{Path}{The base directory of the output trelliscope application. Default is Downloads/Ms1Match.}

\item{Proteins}{An optional list of protein names. Used in the trelliscope display. Must
be the same length and in the same order as Modifications. Default is NULL.}

\item{Messages}{A TRUE/FALSE indicating whether messages should be printed.}
}
\value{
\tabular{ll}{
MolecularFormulas \tab A CSV with all calculated molecular formulas from the ProForma strings. \cr
\tab \cr
FilteredPeaks \tab A CSV with the final spectrum used after filtering \cr
\tab \cr
Matched_Isotope_Distributions \tab A CSV with all matched isotope distributions, regardless of quality \cr
\tab \cr
Trelliscope_Display \tab Visualization of all matched isotope distributions above the quality threshold \cr
\tab \cr
}
}
\description{
A wrapper for quickly running all the steps of the ProteoMatch pipeline
}
\details{
Before running the main algorithm, you will need ProForma strings (or molecular formulas)
and a summed spectra. There are several ways to get ProForma strings, including
pull_modifications_from_mzid and create_proforma. Spectra may be summed with sum_ms1_spectra,
or uploaded from an mzML (see pspecterlib::get_scan_metadata and pspecterlib::get_peak_data) or
created from a csv (see pspecterlib::make_peak_data).

The algorithm is run in 4 main steps:
\enumerate{
\item Molecular Formulas and masses are calculated with calculate_molform
\item Input summed spectra are filtered with filter_peaks
\item Isotopic distributions are calculated with the molecular formulas, and matched
to the filtered spectra
\item All high scoring matches are visualized with a trelliscope display
}

Intact proteomic data can be found \href{https://www.sciencedirect.com/science/article/pii/S1535947622002997}{here}

Digested proteomic data can be found \href{https://google.com}{here}
}
\examples{
\dontrun{

## INTACT PROTEOMICS EXAMPLE ##

# Extract the summed peak data with any tool (here, pspecterlib, which uses mzR)
MSPath <- system.file("extdata", "Intact_Protein_Summed_MS1.mzML", package = "ProteoMatch")
ScanMetadata <- pspecterlib::get_scan_metadata(MSPath)
PeakData <- pspecterlib::get_peak_data(ScanMetadata, ScanNumber = 1, MinAbundance = 0.1)

# Now, get the molecular formulas (required) and protein names (optional)
ProteinData <- read.table(system.file("extdata", "Intact_Protein_Molecular_Formulas.tsv", package = "ProteoMatch"), sep = "\t", header = T)
MolecularFormulas <- ProteinData$Formula
ProteinNames <- ProteinData$Protein

# Get the settings file path
Intact_Settings_Path <- system.file("extdata", "Intact_Protein_Defaults.xlsx", package = "ProteoMatch")

# Now, run the main pipeline 
run_proteomatch(
    Modifications = MolecularFormulas,
    ModType = "Molecular Formula",
    SummedSpectra = PeakData, 
    SettingsFile = Intact_Settings_Path, 
    Path = file.path(.getDownloadsFolder(), "Intact_ProteoMatch_Example"),
    Proteins = ProteinNames,
    Messages = TRUE
)

## DIGESTED PROTEOMICS EXAMPLE ##

# Pull summed peak data from CSV
Peaks <- read.csv(system.file("extdata", "Digested_Protein_PeakData.csv", package = "ProteoMatch"))
PeakData <- pspecterlib::make_peak_data(MZ = Peaks$M.Z, Intensity = Peaks$Intensity)

# Now, get the molecular formulas (required) and protein names (optional)
ProteinData <- read.csv(system.file("extdata", "Digested_Proteins.csv", package = "ProteoMatch"))
ProForma <- ProteinData$Proteoform
ProteinNames <- ProteinData$Protein

# Get the settings file path
Digested_Settings_Path <- system.file("extdata", "Digested_Defaults.xlsx", package = "ProteoMatch")

# Now, run the main pipeline 
run_proteomatch(
    Modifications = ProForma,
    ModType = "ProForma",
    SummedSpectra = PeakData, 
    SettingsFile = Digested_Settings_Path, 
    Path = file.path(.getDownloadsFolder(), "Digested_ProteoMatch_Example"),
    Proteins = ProteinNames,
    Messages = TRUE
)

}

}
